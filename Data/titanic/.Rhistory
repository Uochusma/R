library('dplyr') # data manipulation
library('ggplot2') # Data Visualization
library('ggthemes') # Data Visualization
library(glmnet);
# start load
getwd();
setwd("/Users/YoshinoKai/Documents/R/Data");
getwd();
options(warn = -1)
# load train.csv
train <- read.csv('train.csv', stringsAsFactors = F)
#full <- rbind(train,test)
full <- train
#head(full)
# check the data
#str(full)
#
# Process Age Column
# create a new data set age
age <- full$Age
setwd("/Users/YoshinoKai/Documents/R/Data/titanic");
getwd();
options(warn = -1)
# load train.csv
train <- read.csv('train.csv', stringsAsFactors = F)
#full <- rbind(train,test)
full <- train
#head(full)
# check the data
#str(full)
#
# Process Age Column
# create a new data set age
age <- full$Age
n = length(age)
# replace missing value with a random sample from raw data
set.seed(123)
missed = 0
for(i in 1:n){
if(is.na(age[i])){
age[i] = as.integer(sample(na.omit(full$Age),1))
missed=missed+1
}
}
str(missed)
str(age)
#
class <- full$Pclass
n = length(class)
# replace missing value with a random sample from raw data
set.seed(123)
missed = 0
for(i in 1:n){
if(is.na(class[i])){
class[i] = as.integer(sample(na.omit(full$class),1))
missed=missed+1
}
}
#str(missed)
#str(class)
combined<-cbind(age,class)
#=================
sex <- full$Sex
n = length(sex)
# replace missing value with a random sample from raw data
for(i in 1:n){
if(identical(all.equal(sex[i], 'female'), TRUE)){
sex[i] = 1
}
else{
sex[i] = 0
}
}
combined<-cbind(combined,sex)
#
exp_vars <- data.matrix(combined)
#
survived <- full$Survived
n = length(survived)
#str(survived)
for(i in 1:n){
if(identical(all.equal(survived[i], 1), TRUE)){
survived[i] = TRUE
}
else{
survived[i] = FALSE
}
}
target_var <- data.matrix(survived)
#
#fitRidge1 <- glmnet( x=exp_vars, y=target_var, family="gaussian", alpha=0 )
#plot(fitRidge1, xvar="norm", label=TRUE)
nlambda <- 100;
# L2 or L1 penalty
#alpha <- 0.0; # L2 penalty
#alpha <- 1.0; # L1 penalty (sparse)
alpha <- 0.5; # L1 + L2 penalty
fit1 <- glmnet(exp_vars,target_var,family = "binomial",alpha = alpha,nlambda = nlambda,standardize = TRUE,intercept = TRUE);
# plot parameter sequence
plot(fit1, xvar = "lambda", label = TRUE)
#===========================================
# load test.csv
test  <- read.csv('test.csv', stringsAsFactors = F)
test$Survived <- NA
age2 <- test$Age
n = length(age2)
# replace missing value with a random sample from raw data
set.seed(123)
missed = 0
for(i in 1:n){
if(is.na(age2[i])){
age2[i] = as.integer(sample(na.omit(test$Age),1))
missed=missed+1
}
}
str(missed)
str(age2)
#
class2 <- test$Pclass
n = length(class2)
# replace missing value with a random sample from raw data
set.seed(123)
missed = 0
for(i in 1:n){
if(is.na(class2[i])){
class2[i] = as.integer(sample(na.omit(test$class),1))
missed=missed+1
}
}
combined2<-cbind(age2,class2)
#=================
sex2 <- test$Sex
n = length(sex2)
# replace missing value with a random sample from raw data
for(i in 1:n){
if(identical(all.equal(sex2[i], 'female'), TRUE)){
sex2[i] = 1
}
else{
sex2[i] = 0
}
}
combined2<-cbind(combined2,sex2)
#
test_vars <- data.matrix(combined2)
#pred_fitRidge <- predict(fitRidge1, s="lambda.min", newx=test_vars)
#pred_fitRidge <- predict(fitRidge1, exp_vars);
#str(pred_fitRidge)
validYHat <- predict(fit1, newx = as(test_vars, "dgCMatrix"), s = 0.001, type = "class")
# prediction for all lambda
validYHatPath <- predict(fit1, newx = as(test_vars, "dgCMatrix"), type = "class");
# just for checking
plot(validYHatPath);
# just for checking
plot(validYHatPath);
